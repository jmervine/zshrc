###############################################################
# Prompt
###############################################################
function git_branch_string {
    stat=`git status 2> /dev/null`
    if test "$(echo $stat | grep "^# On branch")"; then
      echo "$(echo $stat | grep "^# On branch .*$" | cut -d " " -f 4)"
    else
      echo "$(echo $stat | grep "^On branch .*$" | cut -d " " -f 3)"
    fi
}

function git_branch {
    RED="%{$fg[red]%}"
    GREEN="%{$fg[green]%}"
    YELLOW="%{$fg[yellow]%}"

    git rev-parse --git-dir &> /dev/null

    git_status="$(git status 2> /dev/null)"
    #echo "git_status:\n$git_status"

    branch_pattern="^On branch (.*)$"
    if ! test "$branch_pattern"; then
      branch_pattern="^# On branch (.*)$"
    fi

    remote_pattern="Your branch is (.*) of"
    diverge_pattern="Your branch and (.*) have diverged"
    ahead_pattern="Your branch is ahead of"
    mod_pattern="modified:"

    if [[ ! ${git_status} =~ "working tree clean" ]]; then
        state=" ${RED}⌁"
    fi

    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${git_status} =~ ${ahead_pattern} ]]; then
          remote=" ${YELLOW}↑"
        else
          remote=" ${YELLOW}↓"
        fi
    fi

    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote=" ${YELLOW}↕"
    fi

    if [[ ${git_status} =~ ${mod_pattern} ]]; then
        remote="${RED} ↬"
    fi

    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch="`git_branch_string`"
        echo " ${branch}${remote}${state}"
    fi
}

# _phc is something I use personally, external to git
# my .localrc overwites this
function _phc {
    echo ''
}

function precmd() {
    # local p_git_branch="`git_branch`"
    # if test "${p_git_branch}"
    # then
    #   local p_git_branch="${p_git_branch}%{$reset_color%} "
    # else
    #   local p_git_branch=" %T "
    # fi

    local return_code="%(?..%{$fg[red]%}%?⌀%{$reset_color%})"

    test "$PS_SIGN" || export PS_SIGN="[I] "

    local os_type
    os_type="%{$fg[green]%}[%n@%m]"
    whoami | grep root > /dev/null && os_type="%{$fg[red]%}[%n@%m]"

    PS1="${os_type} %{$fg[blue]%}%~%{$reset_color%} $ "
    # RPROMPT="%{$fg[red]%}${return_code} %{$reset_color%} [ %{$fg[blue]%}`kc_prompt`%{$reset_color%} | ${p_git_branch}`_phc`]"
}

autoload -U colors && colors

# vim: ft=sh:
