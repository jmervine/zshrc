[core]
  editor = "vim -X"
  autocrlf = input
  symlinks = true

[user]
    name = Joshua Mervine
    email = jmervine@users.noreply.github.com

[github]
    user = jmervine

[color]
    status = auto
    diff = auto
    ui = true

[rerere]
    enabled = true

[branch]
    autosetupmerge = true

[push]
    default = upstream

[advice]
    statusHints = false

[alias]
    # add
    a = add

    # commit
    c = commit -m
    cm = commit -am
    ci = commit
    amend = commit --amend
    ammend = commit --amend
    ciaa = commit -a --amend
    cia = commit -a

    # branching
    b = branch
    ba = branch -a
    br = branch -r


    # checkout
    co = checkout
    cl = checkout -
    nb = checkout -b
    cb = checkout -b

    # cherry-pick
    cp = cherry-pick

    # diff
    d = diff
    dc = diff --cached
    last = diff HEAD^
    dt = difftool -y

    # log
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lp = log -p
    log = log --decorate --graph --date=short
    l = log --decorate --graph --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # pull
    pl = pull

    # push
    ps = push
    pa = pull --all

    # reset
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    filelog = log -u
    mt = mergetool

    # stash
    ss = stash
    sl = stash list
    sa = stash apply
    sd = stash drop

    # status
    s = status -s
    st = status -s
    stat = status

    # tag
    t = tag -n

    # Cleans out your workspace.
    ;nuke = !git clean -fdn && read -p 'The above files will be removed, are you sure? [y,n]' -n1 -r && [[ $REPLY =~ ^[Yy]$ ]] && git clean -fd && git reset --hard
    ;nuke = "!f() { git clean -fdn && read -p 'The above files will be removed, are you sure? [y,n]' -r REPLY && [[ $REPLY =~ ^[Yy]$ ]] && ( git clean -fd && git reset --hard ); }; f"
    ;nuke = !git clean -fdn && read -p 'The above files will be removed, are you sure? [y,n]' -r REPLY && echo $REPLY | grep -i '^y$|^yes$' &> /dev/null && ( git clean -fd && git reset --hard )

    # Show unpushed/ahead changes
    ahead = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git log origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH --oneline
    # Show the diff of upushed/ahead changes
    ahead-diff = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git diff origin/$GIT_CURRENT_BRANCH..$GIT_CURRENT_BRANCH

    # Show unpulled/behind
    behind = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git log $GIT_CURRENT_BRANCH..origin/$GIT_CURRENT_BRANCH --oneline

    # Show diff of unpulled/behind changes
    behind-diff = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git diff $GIT_CURRENT_BRANCH..origin/$GIT_CURRENT_BRANCH

    # Merge the orgin branch into local branch.
    take = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git merge origin/$GIT_CURRENT_BRANCH

    # Lose any unpushed changes
    lose = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git reset --hard origin/$GIT_CURRENT_BRANCH

    # Display project root
    root = !ROOT=$(pwd) && echo $ROOT

    # Stash All
    sa = !git add -A && git stash

    # List branches according to you most recent checkouts.
    recent = !GIT_CURRENT_BRANCH=$(git branch | grep \\* | awk '{print $2}') && git reflog | grep checkout | cut -d : -f 3 | cut -d ' ' -f 6 | tail -n +2 | cat -n | sort -k2,2 -u | sort -k1,1 -n | cut -f 2 | grep -e '.\\{40\\}' -v | grep "^$GIT_CURRENT_BRANCH$" -v

    publish = !BRANCH=$(git branch | grep \\* | awk '{print $2}') && git push -u origin $BRANCH

    # blame
    wtf = blame

    # other
    undo = reset --soft HEAD^
    prune = !git fetch -p && git remote prune origin

    # config
    conf = config
    lconf = config --local

    # clean git repo
    current = !set -x && git pull && git fetch -p && git remote prune origin && git dm
    latest = !set -x && git pull && git fetch -p && git fetch --tags && git remote prune origin && git dm

    # map typos
    remove = !echo 'WARNING: "git remove" does not exist, continuing under the assumption that you meant "git remote"!' && set -x && git remote

    # list tags version sorted
    tags = "!f() { git tag | sort --version-sort; }; f"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Temp ignore
    temp-ignore = update-index --assume-unchanged
    ti = update-index --assume-unchanged

    # Temp ignore
    unignore = update-index --no-assume-unchanged
    uti = update-index --no-assume-unchanged

    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    # whereis = "git log | git name-rev --stdin"

    human = name-rev --name-only --refs=refs/heads/*
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[diff]
    # Git diff will use (i)ndex, (w)ogk tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[help]
    autocorrect = 0

[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[init]
    defaultBranch = master

[commit]
    gpgsign = true

[includeIf "hasconfig:remote.*.url:git@git.soma.salesforce.com:*/**"]
    path = ~/.gitconfig.work

[includeIf "hasconfig:remote.*.url:git@github.com:mulesoft*/**"]
    path = ~/.gitconfig.work

[url "git@github.com:"]
  insteadOf = https://github.com/
